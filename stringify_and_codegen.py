
import random

# input

DATA_BG = [
    # '4. (4 точки) Какво представлява плана за управление в оптичната мрежа',
    # 'План за управление. Това е всеобхватната равнина, която се занимава с всички операции по администриране, поддръжка, мониторинг на изпълнението, диагностика на грешки, събиране на статистически данни и др.',

    '5. (5 точки) Какво представляват мрежите с с маршрутизиране на дължина на вълната Wavelength Routed Networks, WRN?',
    '''Тези мрежи имат потенциала да избегнат проблемите в B&S мрежите:
липсата на повторна употреба на дължината на вълната, загубите от разделянето на мощността и мащабируемост до WAN.
WRN се състои от маршрутизиращи (или байпас) възли, свързани помежду си с влакнести връзки в произволна топология на мрежата.
Крайният потребителски възел е свързан към мрежов възел чрез оптична връзка.
Всеки краен възел е оборудван с набор от оптични предаватели и приемници за изпращане на данни в мрежата и получаване на данни от мрежата, съответно може да се регулират по дължина на вълната.''',
]

str_id = random.randint(0, 0xFFFFFFF)
SINGLE_STRING_VAR_PREFIX = f'autogenerated_str_{str_id}_'
STRING_ARRAY_NAME = 'pairs_vupros_otgovor'
STRING_LENGTHS_ARRAY_NAME = f'pairs_vupros_otgovor_lens'

# translator

SAME = '0123456789., ()?&:'
SAME += 'abcdefghjklmnopqrstuvwxyz'
SAME += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

NON_ASCII_TRANSLATE = {
    # cyrlic lower case
    'а': 'a',
    'б': 'b',
    'в': 'v',
    'г': 'g',
    'д': 'd',
    'е': 'e',
    'ж': 'j',
    'з': 'z',
    'и': 'i',
    'й': 'i', # 0x9E, # note
    'к': 'k',
    'л': 'l',
    'м': 'm',
    'н': 'n',
    'о': 'o',
    'п': 'p',
    'р': 'r',
    'с': 's',
    'т': 't',
    'у': 'u', # note
    'ф': 'f',
    'х': 'h',
    'ц': 'c',
    'ч': 'ch', # note
    'ш': 'sh', # note
    'щ': 'sht', # note
    'ъ': 'u', # note
    # 'а': 'a', // ер малък
    # 'ю': 'a',
    'я': 'q',

    # cyrlic upper case
    'В': 'V',
    'Й': 'I', # 0x9D, # note
    'К': 'K',
    'П': 'P',
    'Т': 'T',

    # other
    '\n': ' ||| ',
}

# code

var_count = 0
created_strings = []
string_lengths = []

for str_bg in DATA_BG:

    char_arr = []

    for char in str_bg:
        if char in SAME:
            pass
        elif char in NON_ASCII_TRANSLATE:
            char = NON_ASCII_TRANSLATE[char]
        else:
            assert False, f'unknown char `{char}` {ord(char)}'
        
        codes = []

        if type(char) is int:
            codes.append(char)
        elif type(char) is str:
            for char in char:
                codes.append(ord(char))
        else:
            assert False

        codes = [f'{code}' for code in codes]

        char_arr.extend(codes)
    
    string_length = len(char_arr)
    char_arr = '{' + ', '.join(char_arr) + '}'

    var_name = f'{SINGLE_STRING_VAR_PREFIX}{var_count}'

    print(f'char {var_name}[] = {char_arr};')

    var_count += 1
    created_strings.append(var_name)
    string_lengths.append(f'{string_length}')

array_data = ', '.join(created_strings)
print(f'char *{STRING_ARRAY_NAME}[] = {{{array_data}}};')

array_lengths = ', '.join(string_lengths)
print(f'int {STRING_LENGTHS_ARRAY_NAME}[] = {{{array_lengths}}};')